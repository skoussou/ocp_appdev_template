// Jenkinsfile for MLBParks
podTemplate(
  label: "skopeo-pod",
  cloud: "openshift",
  inheritFrom: "maven",
  podRetention: "always()",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "docker-registry.default.svc:5000/${GUID}-jenkins/jenkins-slave-appdev",
      resourceRequestMemory: "1Gi",
      resourceLimitMemory: "2Gi"
    )
  ]
) {
  node('skopeo-pod') {
    echo "GUID: ${GUID}"
    echo "CLUSTER: ${CLUSTER}"

    def mvnCmd = "mvn -s ../nexus_settings.xml"
    def nexusMavenPublicRepoURL = "http://nexus3-${GUID}-nexus.apps.${CLUSTER}/repository/maven-all-public"

    // The following variables need to be defined at the top level
    // and not inside the scope of a stage - otherwise they would not
    // be accessible from other stages.
    // Extract version and other properties from the pom.xml
    //def groupId    = getGroupIdFromPom("pom.xml")
    //def artifactId = getArtifactIdFromPom("pom.xml")
    //def version    = getVersionFromPom("pom.xml")
    def groupId    = "tbd"
    def artifactId = "tbd"
    def version    = "tbd"

    // Set the tag for the development image: version + build number
    // def devTag  = "${version}-${BUILD_NUMBER}"
    def devTag  = "tbd"
    // Set the tag for the production image: version
    // def prodTag = "${version}"  
    def prodTag = "tbd"

    // Your Pipeline Code goes here. Make sure to use the ${GUID} and ${CLUSTER} parameters where appropriate
    // You need to build the application in directory `MLBParks`.
    // Also copy "../nexus_settings.xml" to your build directory
    // and replace 'GUID' in the file with your ${GUID} to point to >your< Nexus instance

    // Checkout Source Code
    stage('Checkout Source') {
        echo 'Download Ocp_appdev_template MLBParks'
        git branch: "master", credentialsId: '${GUID}-jenkins-github-secret', url : 'https://github.com/skoussou/ocp_appdev_template.git'

        echo "assigning GAV variables"
        dir ('MLBParks') {
            echo "   "
            echo "   "
            echo "   "
            echo "---------------------------------------------------"
            echo "       VARIABLES BEFORE ASSIGNMENT                 "
            echo "---------------------------------------------------"
            echo " groupId ==> ${groupId}"
            echo " artifactId ==> ${artifactId}"
            echo " version ==> ${version}"
            echo " devTag ==> ${devTag}"
            echo " prodTag ==> ${prodTag}"
            echo "---------------------------------------------------"
            groupId    = getGroupIdFromPom("pom.xml")
            artifactId = getArtifactIdFromPom("pom.xml")
            version    = getVersionFromPom("pom.xml")
            devTag  = "${version}-${BUILD_NUMBER}"
            prodTag = "${version}" 
            echo "   "
            echo "   "
            echo "   "
            echo "---------------------------------------------------"
            echo "       VARIABLES AFTER ASSIGNMENT                 "
            echo "---------------------------------------------------"
            echo " groupId ==> ${groupId}"
            echo " artifactId ==> ${artifactId}"
            echo " version ==> ${version}"
            echo " devTag ==> ${devTag}"
            echo " prodTag ==> ${prodTag}"
            echo "---------------------------------------------------"
        }
    }   

    // Using Maven build the war file
    // Do not run tests in this step
    stage('Build war') {

        dir ('MLBParks') {
	         // Build, package and test with custom settings.xml pointing to corporate NEXUS
             echo "Building version ${version}"
             echo "Building command --> [sh ${mvnCmd} clean package -DskipTests -DURL=${nexusMavenPublicRepoURL}]"
             sh "${mvnCmd} clean package -DskipTests -DURL=${nexusMavenPublicRepoURL}"
        }
    }


    // Execute the following tests in parallel and present the results in the build log:
    // - Unit tests
    // - Code coverage tests

    stage('Parallel Unit & Coverage Steps') {
      steps {
        parallel(
          a: {
            echo "Running Unit Tests"
            sh "${mvnCmd} test -DURL=${nexusMavenPublicRepoURL}"" 
          },
          b: {
            echo "Running Code Analysis"
            sh "${mvnCmd} sonar:sonar -Dsonar.host.url=http://sonarqube-${GUID}-sonarqube.apps.${CLUSTER} -Dsonar.projectName=${JOB_BASE_NAME}-${devTag}"
          }
        )
      }
    }

    // Using Maven run the unit tests
    //stage('Unit Tests') {
    //        echo "Running Unit Tests"
    //        sh "${mvnCmd} test"
    //}

    // Using Maven call SonarQube for Code Analysis
    //stage('Code Analysis') {
    //        echo "Running Code Analysis"
    //        sh "${mvnCmd} sonar:sonar -Dsonar.host.url=http://sonarqube-sdk-sonarqube.apps.fab.example.opentlc.com -Dsonar.projectName=${JOB_BASE_NAME}-${devTag}"
    //}

 
  }
}

// Convenience Functions to read variables from the pom.xml
// Do not change anything below this line.
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
def getGroupIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<groupId>(.+)</groupId>'
  matcher ? matcher[0][1] : null
}
def getArtifactIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<artifactId>(.+)</artifactId>'
  matcher ? matcher[0][1] : null
}
