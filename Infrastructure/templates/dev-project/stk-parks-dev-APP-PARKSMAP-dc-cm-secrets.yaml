apiVersion: template.openshift.io/v1
kind: Template
metadata:
  creationTimestamp: null
  name: parksmap-dev
objects:
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      app: ${APPLICATION_NAME}
      deploymentconfig: ${APPLICATION_NAME}
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      type: Rolling
    template:
      metadata:
        labels:
          app: ${APPLICATION_NAME}
          deploymentconfig: ${APPLICATION_NAME}
      spec:
        containers:
        - image: docker-registry.default.svc:5000/${GUID}-parks-dev/${APPLICATION_NAME}:latest
          imagePullPolicy: IfNotPresent
          name: ${APPLICATION_NAME}
          livenessProbe:
            exec:
              command:
              - echo
              - ok
            failureThreshold: 3
            initialDelaySeconds: 60
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /ws/healthz/
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          env:
          - name: APPNAME
            valueFrom:
              configMapKeyRef:
                name: ${APPLICATION_NAME}-config
                key: APPNAME
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    annotations:
      openshift.io/host.generated: "true"
    creationTimestamp: null
    labels:
      app: ${APPLICATION_NAME}
      type: parksmap-backend
    name: ${APPLICATION_NAME}
  spec:
    host: ${APPLICATION_NAME}-${GUID}-parks-dev.apps.${CLUSTER_NAME}
    port:
      targetPort: 8080
    to:
      kind: Service
      name: ${APPLICATION_NAME}
      weight: 100
    wildcardPolicy: None
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    labels:
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    ports:
    - port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      app: ${APPLICATION_NAME}
      deploymentconfig: ${APPLICATION_NAME}
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  data:
    APPNAME: ParksMap (Dev)
  kind: ConfigMap
  metadata:
    name: ${APPLICATION_NAME}-config
parameters:
- description: The GUID prefix of the parks-dev project 
  displayName: GUID 
  name: GUID
  required: true
- description: The Name to tag all objects of this application (dc, configmaps etc.)
  displayName: The Application Name 
  name: APPLICATION_NAME
  required: true
- description: The Name of the cluster the project is running in
  displayName: The Cluster Name 
  name: CLUSTER_NAME
  required: true
